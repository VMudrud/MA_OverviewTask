services:
  resource-db:
    image: postgres:18-alpine
    environment:
      POSTGRES_DB: ${RESOURCE_DB_NAME}
      POSTGRES_USER: ${RESOURCE_DB_USER}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD}
    ports:
      - "5432:5432"  # Maps container port 5432 to host port 5432
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${RESOURCE_DB_NAME} -U ${RESOURCE_DB_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5

  song-db:
    image: postgres:18-alpine
    environment:
      POSTGRES_DB: ${SONG_DB_NAME}
      POSTGRES_USER: ${SONG_DB_USER}
      POSTGRES_PASSWORD: ${SONG_DB_PASSWORD}
    ports:
      - "5433:5432"  # Maps container port 5432 to host port 5433 (to avoid conflict)
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${SONG_DB_NAME} -U ${SONG_DB_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5

  eureka-service:
    build: ./EurekaService
    environment:
      EUREKA_SERVICE_URL: ${EUREKA_SERVICE_URL}
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-service:
    build: ./ResourceService
    depends_on:
      resource-db:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${RESOURCE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${RESOURCE_DB_PASSWORD}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      EUREKA_SERVICE_URL: ${EUREKA_SERVICE_URL}

  song-service:
    build: ./SongService
    depends_on:
      song-db:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${SONG_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${SONG_DB_PASSWORD}
      EUREKA_SERVICE_URL: ${EUREKA_SERVICE_URL}
    deploy:
      replicas: 2

  api-gateway:
    build: ./ApiGateway
    depends_on:
      eureka-service:
        condition: service_healthy
    environment:
      EUREKA_SERVICE_URL: ${EUREKA_SERVICE_URL}
      SONG_SERVICE_GATEWAY_URI: ${SONG_SERVICE_GATEWAY_URI}
      RESOURCE_SERVICE_GATEWAY_URI: ${RESOURCE_SERVICE_GATEWAY_URI}
    ports:
      - "8080:8080"